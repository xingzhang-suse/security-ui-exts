import SteveModel from '@shell/plugins/steve/steve-class';
import { PRODUCT_NAME, PAGE } from "@pkg/types";
import { RESOURCE } from '@pkg/types';
import { _CREATE } from '@shell/config/query-params';
export default class Registry extends SteveModel {
  get _availableActions() {
    if (this.$rootState.targetRoute.params.resource === "sbombastic.rancher.io.registry") {
      return super._availableActions;
    }
    const out = super._availableActions.filter(action => !['showConfiguration','download','downloadYaml'].includes(action.action));
    
    // In details page, we don't want to show the scan action
    if (this.$rootState.targetRoute && 'id' in this.$rootState.targetRoute.params ||
      this.$rootState.targetRoute.params.resource === "sbombastic.rancher.io.registry") {
      return out;
    }

    const scanAction = {
      action:   'scanRegistry',
      label:    this.t('imageScanner.registries.button.startScan'),
      icon:     'icon-play',
      enabled:  true,
      bulkable: false,
      invoke:   async ({}, res = []) => {
        const target = (res && res.length ? res[0] : r);
        const model = target._model || target;
        const scanjobObj = await this.$dispatch('create', {
            type: RESOURCE.SCAN_JOB,
            metadata: {
                generateName: model.metadata.name,
                namespace: model.metadata.namespace,
            },
            spec: {
                registry: model.metadata.name,
            }
        });
        try {
            await scanjobObj.save();
            this.$dispatch('growl/success', {
                title: this.$rootGetters['i18n/t']('imageScanner.registries.messages.registryScanComplete'),
                message: this.$rootGetters['i18n/t']('imageScanner.registries.messages.registryScanComplete', { name: model.metadata.name }),
            }, { root: true });
        } catch (e) {
            this.$dispatch('growl/error', {
                title: this.$rootGetters['i18n/t']('imageScanner.registries.messages.registryScanFailed'),
                message: e.message,
            }, { root: true });
        } finally {
          if (target.refreshFn instanceof Function) {
            setTimeout(() => {
                target.refreshFn();
            }, 2000);
          }
        }
      },
    };
    const divider = {
      divider:true
    };
    if (!this.currStatus || ["none", "failed", "complete"].includes(this.currStatus.toLowerCase())) {
      out.unshift(divider);
      out.unshift(scanAction);
    }

    return out;
  }

  set _availableActions(actions) {
    this._availableActions = actions;
  }
  get listLocation() {
    // if (this.$rootState.targetRoute.params.resource === "sbombastic.rancher.io.registry") {
    //   return this._listLocation;
    // }
    return { name: `c-cluster-${PRODUCT_NAME}-${PAGE.REGISTRIES}`, };
  }

  get doneOverride() {
    return this.listLocation;
  }

  get parentLocationOverride() {
    return this.listLocation;
  }
}
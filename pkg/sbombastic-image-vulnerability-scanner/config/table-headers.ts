import { elapsedTime } from "@shell/utils/time";

export const REGISTRY_SCAN_TABLE = [
  {
    name: "registry",
    labelKey: "imageScanner.registries.registrytable.header.registry",
    value: "metadata.name",
    sort: "registry",
    formatter: "RegistryNameCell",
  },
  {
    name: "namespace",
    labelKey: "imageScanner.registries.registrytable.header.namespace",
    value: "metadata.namespace",
    sort: "namespace",
  },
  {
    name: "uri",
    labelKey: "imageScanner.registries.registrytable.header.uri",
    value: "spec.uri",
    sort: "uri",
  },
  {
    name: "repositories",
    labelKey: "imageScanner.registries.registrytable.header.repos",
    value: "spec.repositories",
    sort: "repositories",
  },
  {
    name: "scanInterval",
    labelKey: "imageScanner.registries.registrytable.header.schedule",
    value: "spec.scanInterval",
    getValue: (row: any) => elapsedTime(row.scanInterval * 3600 * 1000).label,
    sort: "scanInterval",
  },
  {
    name: "status",
    labelKey: "imageScanner.registries.registrytable.header.status",
    value: "scanjobs.0.status.statusResult.type",
    formatter: "RegistryStatusCellBadge",
    sort: "status",
    width: 100,
  },
  {
    name: "_progress",
    labelKey: "imageScanner.registries.registrytable.header.progress",
    value: "scanjobs.0.status.imagesCount",
    getValue: (row: any) => row.scanjobs[0].status.imagesCount,
    formatter: "ProgressCell",
    sort: "progress",
  },
  {
    name: "previousScan",
    labelKey: "imageScanner.registries.registrytable.header.prevScan",
    getValue: (row: any) => row,
    formatter: "PreviousScanCell",
    sort: "previousScan",
    width: 150,
  },
];

export const REGISTRY_SCAN_HISTORY_TABLE = [
  {
    name: "status",
    labelKey: "imageScanner.registries.configuration.scanTable.header.status",
    value: "status.statusResult.type",
    formatter: "RegistryStatusCellBadge",
    sort: "status",
  },
  {
    name: "since",
    labelKey: "imageScanner.registries.configuration.scanTable.header.since",
    value: "status.statusResult.lastTransitionTime",
    formatter: "Date",
    sort: "timestamp",
  },
  {
    name: "progress",
    labelKey: "imageScanner.registries.configuration.scanTable.header.progress",
    getValue: (row: any) => {
      let progress = Math.round(
        (row.status.scannedImagesCount / row.status.imagesCount) * 100
      );
      return { progress };
    },
    formatter: "ProgressCell",
    sort: "progress",
  },
  {
    name: "imagesScanned",
    labelKey:
      "imageScanner.registries.configuration.scanTable.header.imagesScanned",
    value: "status.scannedImagesCount",
    sort: "imagesScanned",
  },
  {
    name: "imagesFound",
    labelKey:
      "imageScanner.registries.configuration.scanTable.header.imagesFound",
    value: "status.imagesCount",
    sort: "imagesFound",
  },
  {
    name: "errors",
    labelKey: "imageScanner.registries.configuration.scanTable.header.error",
    value: "status.statusResult.message",
    sort: "errors",
  },
];
